<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>解决hexo-abbrlink与hexo-asset-image冲突导致博文图片不显示的问题</title>
    <link href="/posts/7ee94710/"/>
    <url>/posts/7ee94710/</url>
    
    <content type="html"><![CDATA[<p><img src="/posts/7ee94710/image.png" alt="配置Pods库信息"></p><blockquote><p>转载自：<a href="https://imgod.me/posts/55.html">abbrlink插件导致图片失效 - 故人随笔 (imgod.me)</a></p></blockquote><p><strong>abbrlink 导致图片无法显示</strong></p><p>在 hexo 里我们引入图片都是用 hexo-asset-image 插件，但单独使用是没有问题的，<br>如果遇到标题包含中文的情况下我们复制文章链接会变成一堆很长的编码，<br>这时候我们就要用到 abbrlink 插件，<br>至于插件如何使用我就不多赘述了，看文档即可<br>当我们配置完成后，就会发现虽然文章链接确实没有问题了，但是图片却无法显示</p><p>我们打开 f12 查看会发现图片路径变成 <code>/.io//001.webp</code> 而实际路径应该是 <code>posts/:abbrlink/001.webp</code></p><h4 id="解决方案-一"><a href="#解决方案-一" class="headerlink" title="解决方案(一)"></a><a href="https://imgod.me/posts/55.html#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E4%B8%80"></a><a href="https://imgod.me/posts/55.html#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E4%B8%80" title="解决方案(一)"></a>解决方案(一)</h4><blockquote><p><strong>适用于 <code>permalink: posts/:abbrlink/</code>方案</strong></p></blockquote><p>打开<code>blog\node_modules\hexo-asset-image\index.js</code>文件</p><p>将其中第 24 行代码<code>var endPos = link.lastIndexOf(&#39;.&#39;);</code><br>更改为<code>var endPos = link.length-1;</code></p><p>重新<code>Git Bash Here</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><h4 id="解决方案-二"><a href="#解决方案-二" class="headerlink" title="解决方案(二)"></a><a href="https://imgod.me/posts/55.html#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E4%BA%8C"></a><a href="https://imgod.me/posts/55.html#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E4%BA%8C" title="解决方案(二)"></a>解决方案(二)</h4><blockquote><p><strong>适用于 <code>permalink: posts/:abbrlink.html</code>方案</strong></p></blockquote><p>打开<code>blog\node_modules\hexo-asset-image\index.js</code>文件</p><p>将其中第 24 行代码<code>var endPos = link.lastIndexOf(&#39;.&#39;);</code><br>更改为<code>var endPos = link.length-5;</code></p><p>重新<code>Git Bash Here</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TableBuilder - 更方便快捷构建TableView页面</title>
    <link href="/posts/4e3de635/"/>
    <url>/posts/4e3de635/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>更方便快捷构建TableView页面</p><p>优点:</p><ul><li>更少代码</li><li>声明式</li><li>灵活度高</li><li>基于 UITableViewDelegate &amp; UITableViewDataSource</li><li>已经处理好Cell复用</li><li>方便重写和扩展</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>要运行示例项目，请克隆仓库，并首先从示例目录运行<code>pod install</code>。</p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><blockquote><p>Swift 5+</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>TableBuilder可以通过<a href="https://cocoapods.org/">CocoaPods</a>获得。安装<br>只需将下面这行添加到你的Podfile中:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">pod <span class="hljs-string">&#x27;TableBuilder&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> TableBuilder<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span>: <span class="hljs-title class_">UIViewController</span> &#123;<br>    <br>    <span class="hljs-keyword">@IBOutlet</span> <span class="hljs-keyword">weak</span> <span class="hljs-keyword">var</span> tableView: <span class="hljs-type">UITableView</span>!<br>    <br>    <span class="hljs-keyword">var</span> tableProxy: <span class="hljs-type">TableProxy</span>!<br>    <br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">viewDidLoad</span>() &#123;<br>        <span class="hljs-keyword">super</span>.viewDidLoad()<br>        reloadTable()<br>    &#125;<br>    <br>    <span class="hljs-keyword">var</span> show: <span class="hljs-type">Bool</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span><br>    <br>    <span class="hljs-keyword">func</span> <span class="hljs-title function_">reloadTable</span>() &#123;<br>        tableProxy <span class="hljs-operator">=</span> <span class="hljs-type">TableProxy</span>(tableView) &#123; [<span class="hljs-keyword">weak</span> <span class="hljs-keyword">self</span>] <span class="hljs-keyword">in</span><br>            <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span> <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span> &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-type">TableBuilder</span> &#123;<br>                <span class="hljs-keyword">for</span> <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span><span class="hljs-number">3</span> &#123;<br>                    <span class="hljs-type">TableBuilder</span>.<span class="hljs-type">Section</span>(<br>                        headerHeight: <span class="hljs-number">50</span>,<br>                        headerReuse: .anyClass(<span class="hljs-type">UITableViewHeaderFooterView</span>.<span class="hljs-keyword">self</span>, &#123; tableView, section, reusableView <span class="hljs-keyword">in</span><br>                        reusableView.contentView.backgroundColor <span class="hljs-operator">=</span> .red<br>                    &#125;, &#123; tableView, reusableView, indexPath <span class="hljs-keyword">in</span><br>                        <span class="hljs-comment">/// headerWillDisplay</span><br>                        reusableView.layoutIfNeeded()<br>                        reusableView.contentView.cutRectCorner([.topRight, .bottomLeft], cornerRadius: <span class="hljs-number">25</span>)<br>                    &#125;)) &#123;<br>                        <span class="hljs-type">TableBuilder</span>.<span class="hljs-type">Row</span>(<br>                            cellHeight: <span class="hljs-number">50</span>,<br>                            cellType: <span class="hljs-type">TableViewCell1</span>.<span class="hljs-keyword">self</span>, reuseType: .nib<br>                        ) &#123; tableView, indexPath, cell <span class="hljs-keyword">in</span><br>                            <br>                        &#125; didSelectRowAtIndexPath: &#123; tableView, indexPath, cell <span class="hljs-keyword">in</span><br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CellType1的单独的点击事件&quot;</span>)<br>                        &#125;<br>                        <span class="hljs-type">TableBuilder</span>.<span class="hljs-type">Row</span>(<br>                            cellHeight: <span class="hljs-number">50</span>,<br>                            cellType: <span class="hljs-type">TableViewCell2</span>.<span class="hljs-keyword">self</span>, reuseType: .anyClass<br>                        ) &#123; tableView, indexPath, cell <span class="hljs-keyword">in</span><br>                            cell.contentView.backgroundColor <span class="hljs-operator">=</span> .green<br>                            cell.textLabel<span class="hljs-operator">?</span>.text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(indexPath.row)</span>&quot;</span><br>                        &#125; didSelectRowAtIndexPath: &#123; tableView, indexPath, cell <span class="hljs-keyword">in</span><br>                            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=====Cell类型2的单独的点击事件&quot;</span>)<br>                        &#125; willDisplay: &#123; tableView, cell, indexPath <span class="hljs-keyword">in</span><br>                            cell.contentView.cutRectCorner([.topLeft, .bottomRight], cornerRadius: <span class="hljs-number">25</span>)<br>                        &#125;<br>                        <span class="hljs-keyword">let</span> count <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br>                        <span class="hljs-keyword">for</span> <span class="hljs-keyword">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span>count &#123;<br>                            <span class="hljs-type">TableBuilder</span>.<span class="hljs-type">Row</span>(<br>                                cellHeight: <span class="hljs-number">30</span>,<br>                                autoCellHeight: <span class="hljs-literal">false</span>,<br>                                cellType: <span class="hljs-type">UITableViewCell</span>.<span class="hljs-keyword">self</span>,<br>                                reuseType: .anyClass<br>                            ) &#123; tableView, indexPath, cell <span class="hljs-keyword">in</span><br>                                cell.contentView.backgroundColor <span class="hljs-operator">=</span> .blue<br>                                cell.textLabel<span class="hljs-operator">?</span>.text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(indexPath.row)</span>&quot;</span><br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.show &#123;<br>                            <span class="hljs-type">TableBuilder</span>.<span class="hljs-type">Row</span>(<br>                                cellHeight: <span class="hljs-number">50</span>,<br>                                cellType: <span class="hljs-type">UITableViewCell</span>.<span class="hljs-keyword">self</span><br>                            ) &#123; tableView, indexPath, cell <span class="hljs-keyword">in</span><br>                                cell.contentView.backgroundColor <span class="hljs-operator">=</span> .purple<br>                                cell.textLabel<span class="hljs-operator">?</span>.text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(indexPath.row)</span>&quot;</span><br>                            &#125;<br>                            <span class="hljs-type">TableBuilder</span>.<span class="hljs-type">Row</span>(<br>                                cellHeight: <span class="hljs-number">50</span>,<br>                                cellType: <span class="hljs-type">UITableViewCell</span>.<span class="hljs-keyword">self</span><br>                            ) &#123; tableView, indexPath, cell <span class="hljs-keyword">in</span><br>                                cell.contentView.backgroundColor <span class="hljs-operator">=</span> .purple<br>                                cell.textLabel<span class="hljs-operator">?</span>.text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(indexPath.row)</span>&quot;</span><br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-type">TableBuilder</span>.<span class="hljs-type">Row</span>(<br>                                cellHeight: <span class="hljs-number">90</span>,<br>                                cellType: <span class="hljs-type">UITableViewCell</span>.<span class="hljs-keyword">self</span><br>                            )&#123; tableView, indexPath, cell <span class="hljs-keyword">in</span><br>                                cell.contentView.backgroundColor <span class="hljs-operator">=</span> .yellow<br>                                cell.textLabel<span class="hljs-operator">?</span>.text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(indexPath.row)</span>&quot;</span><br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        tableProxy.didSelectRowAtIndexPath <span class="hljs-operator">=</span> &#123; tableView, indexPath <span class="hljs-keyword">in</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;clicked: <span class="hljs-subst">\(indexPath.section)</span> - <span class="hljs-subst">\(indexPath.row)</span>&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="开源许可"><a href="#开源许可" class="headerlink" title="开源许可"></a>开源许可</h2><p>TableBuilder在MIT许可下可用。查看许可证文件以获取更多信息。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS模块化开发的两种基本实现方式</title>
    <link href="/posts/8f33a448/"/>
    <url>/posts/8f33a448/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>模块化开发有诸多的优势：</p><ul><li>避免耦合</li><li>分工明细</li><li>职责单一</li><li>依赖清晰</li><li>便于移植</li><li>灵活组合</li><li>…</li></ul><p>模块化开发试用场景：</p><ul><li>项目较大，功能复杂</li><li>功能模块需要跨项目运行</li><li>功能模块有高频度复用需求</li><li>…</li></ul><p>iOS开发中模块化主流的有两种方案：</p><ul><li>CocoaPods私有库</li><li>一个XCode Workspace组合若干个Project</li><li>综合前两中方案实现</li></ul><h2 id="使用CocoaPods私有库实现模块化"><a href="#使用CocoaPods私有库实现模块化" class="headerlink" title="使用CocoaPods私有库实现模块化"></a>使用CocoaPods私有库实现模块化</h2><p>这里也可以参考我的另一篇文章，<a href="https://cba023.github.io/posts/b4fe90af/">如何创建CocoaPods开源库</a>，里面有CocoaPods创建自建仓库的详细说明。</p><p>接下来我们实战创建两个私有库来实现模块化开发。</p><p><img src="/posts/8f33a448/16454454216482.jpg" alt="创建工程命名为Proj1"></p><p>得到一个工程，工程目录如下:</p><p><img src="/posts/8f33a448/16454455632013.jpg"></p><h3 id="创建Cocoapods私有库"><a href="#创建Cocoapods私有库" class="headerlink" title="创建Cocoapods私有库"></a>创建Cocoapods私有库</h3><p>显然，这时候CocoaPods还没有参与管理项目，我们找到项目根目录。</p><p>我们要使用Cocoapods在这里创建一个新的库命名为<code>MyUILib</code>用做UI工具库，执行：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">pod <span class="hljs-keyword">lib</span> <span class="hljs-keyword">create</span> MyUILib<br></code></pre></td></tr></table></figure><p><img src="/posts/8f33a448/16454460809320.jpg"></p><p>在输入一系列的参数后，控制台输出如下：</p><p><img src="/posts/8f33a448/16454462223785.jpg"></p><h3 id="编辑私有库的工程"><a href="#编辑私有库的工程" class="headerlink" title="编辑私有库的工程"></a>编辑私有库的工程</h3><p>接着XCode会自动打开一个新生成的工程。打开ReplaceMe.Swift所在目录.</p><p><img src="/posts/8f33a448/16454475214753.jpg"></p><p><img src="/posts/8f33a448/16454476567720.jpg"></p><p>可以看到MyUILib下包含了Classes和Assets两个目录<br>将Classes拖入工程ReplaceMe所在的位置。点击<code>Finish</code>完成目录导入。</p><p><img src="/posts/8f33a448/16454477324121.jpg"></p><p>删除Classes目录下的所有文件和ReplaceMe.swift</p><p><img src="/posts/8f33a448/16454478291136.png"></p><p>点击Move to Trash即删除到废纸篓。接着在Classes目录下创建<br>创建一个文件，命名为<code>UIView+Extensions.swift</code></p><p><img src="/posts/8f33a448/16454479454146.png"></p><p>然后我们在UIView+Extensions.swift文件中写入代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">UIView</span> &#123;<br>    <span class="hljs-comment">/// 设置背景色为红色</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">setRedBackgroundColor</span>() &#123;<br>        <span class="hljs-keyword">self</span>.backgroundColor <span class="hljs-operator">=</span> .red<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们就可以去之前我们创建的Proj1中引入MyUILib模块（实际上是Cocoapods私有库）了。</p><h3 id="关联工程与私有库模块"><a href="#关联工程与私有库模块" class="headerlink" title="关联工程与私有库模块"></a>关联工程与私有库模块</h3><p>关闭MyUILib工程，使用终端打开Proj1工程目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /Users/xxx/.../Proj1/   <br></code></pre></td></tr></table></figure><p>，然后执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pod init<br></code></pre></td></tr></table></figure><p>Proj1变成了使用Cocoapods管理的工程。工程目录下多了一个<code>Podfile</code>文件，使用文本编辑器打开该文件，加入如下代码：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">pod <span class="hljs-string">&#x27;MyUILib&#x27;</span>, :<span class="hljs-function"><span class="hljs-params">path</span> =&gt;</span> <span class="hljs-string">&#x27;./MyUILib/&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/posts/8f33a448/16454484782272.jpg"></p><p>执行pod install</p><p><img src="/posts/8f33a448/16454485501236.jpg"></p><p>主工程Proj1成功依赖MyUILib库。如果要创建更多的模块，可以重复上述的步骤，实现更多的私有库模块。</p><p>我们来看看工程调用效果。打开<code>Proj1.xcworkspace</code>。在ViewController中调用MyUILib中的API，可以看到实际效果。</p><p><img src="/posts/8f33a448/16454491131678.jpg"></p><p>大功告成。</p><h2 id="WorkSpace嵌套Project实现模块化"><a href="#WorkSpace嵌套Project实现模块化" class="headerlink" title="WorkSpace嵌套Project实现模块化"></a>WorkSpace嵌套Project实现模块化</h2><h3 id="初始化主工程"><a href="#初始化主工程" class="headerlink" title="初始化主工程"></a>初始化主工程</h3><p>创建一个工程命名为Proj2作为我们开发的主工程。</p><p><img src="/posts/8f33a448/16462138550656.jpg"></p><p>接着创建一个WorkSpace，同样命名为Proj2(也可以叫其他名字)。</p><p><img src="/posts/8f33a448/16462140112065.jpg"></p><h3 id="创建WorkSpace并将主工程引入其中"><a href="#创建WorkSpace并将主工程引入其中" class="headerlink" title="创建WorkSpace并将主工程引入其中"></a>创建WorkSpace并将主工程引入其中</h3><p>将新创建的WorkSpace放在与Proj2.xcodeproj相同路径。</p><p><img src="/posts/8f33a448/16462140457794.png"></p><p>点击<code>Save</code>。</p><p>接着XCode会自动打开该WorkSpace。我们在菜单中找到<code>Add Files to &quot;Proj2&quot;</code>。</p><p><img src="/posts/8f33a448/16462141963294.jpg"></p><p>选择<code>Proj2.xcodeproj</code>，点击<code>Add</code>，即实现添加Project到WorkSpace。</p><p><img src="/posts/8f33a448/16462143547078.png"></p><h3 id="创建一个工程作为依赖模块并引入到WorkSpace"><a href="#创建一个工程作为依赖模块并引入到WorkSpace" class="headerlink" title="创建一个工程作为依赖模块并引入到WorkSpace"></a>创建一个工程作为依赖模块并引入到WorkSpace</h3><p>然后我们再创建一个XCode工程。</p><p><img src="/posts/8f33a448/16462144607967.jpg"></p><p>我们创建一个用作UI库的模块，命名为UILib，这里创建类型选择Framework。</p><p><img src="/posts/8f33a448/16462145232131.png"></p><p><img src="/posts/8f33a448/16462146414393.png"></p><p>将该工程的保存路径放在与Proj2.xcodeproj相同路径。</p><p><img src="/posts/8f33a448/16462146645199.png"></p><p>点击Create之后，即生成了一个工程，关闭该工程窗口。</p><p><img src="/posts/8f33a448/16462148168227.jpg"></p><p>接着在之前打开的WorkSpace中将UILib工程添加进去。步骤之前已经有讲，这次选中UILib.xcodeproj工程。</p><p><img src="/posts/8f33a448/16462153348771.jpg"></p><p><img src="/posts/8f33a448/16462149648687.jpg"></p><p>点击<code>Add</code>后，WorkSpace中就包含UILib和Proj2两个工程了，其中Proj2这里作为主工程，UILib则是主工程依赖的模块。要注意的是模块之前的依赖管理一定要理清，尽量使用单向依赖，方便模块解耦，也符合设计模式的依赖倒置法则。</p><p><img src="/posts/8f33a448/16462155987348.jpg"></p><h3 id="在模块中添加API并在主工程中调用"><a href="#在模块中添加API并在主工程中调用" class="headerlink" title="在模块中添加API并在主工程中调用"></a>在模块中添加API并在主工程中调用</h3><p>接下来我们在UILib中添加一个UIView+Extensions.swift文件，添加一段代码。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">UIView</span> &#123;<br>    <span class="hljs-comment">/// 设置背景色为红色</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">setRedBackgroundColor</span>() &#123;<br>        <span class="hljs-keyword">self</span>.backgroundColor <span class="hljs-operator">=</span> .red<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在Proj2的Build Phases -&gt; Link Binary With Libraries中引入UILib.framework。</p><p><img src="/posts/8f33a448/16462163527910.jpg"></p><p>接下来在Proj1的ViewController中调用UILib中的方法，即实现了设置红色背景色的API。</p><p><img src="/posts/8f33a448/16462164633929.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何创建CocoaPods开源库</title>
    <link href="/posts/b4fe90af/"/>
    <url>/posts/b4fe90af/</url>
    
    <content type="html"><![CDATA[<h2 id="创建与配置"><a href="#创建与配置" class="headerlink" title="创建与配置"></a>创建与配置</h2><h3 id="创建Pods库"><a href="#创建Pods库" class="headerlink" title="创建Pods库"></a>创建Pods库</h3><p>现在我们来建立一个基于Swift语言的Pods库。命名为SwiftUIKitExtensions，用途是UIKit的扩展功能库。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">pod <span class="hljs-keyword">lib</span> <span class="hljs-keyword">create</span> SwiftUIKitExtensions<br></code></pre></td></tr></table></figure><p>执行指令后依次键盘录入需要的配置。</p><p><img src="/posts/b4fe90af/16432134864204.jpg" alt="配置Pods库信息"></p><p>执行后会生成一个名为<code>SwiftUIKitExtensions</code>的XCode工程并且由XCode自动打开。</p><p><img src="/posts/b4fe90af/16432136212869.jpg" alt="生成的XCode工程"></p><h3 id="配置podspec文件"><a href="#配置podspec文件" class="headerlink" title="配置podspec文件"></a>配置podspec文件</h3><p>找到工程根目录下的<code>SwiftUIKitExtensions.podspec</code>文件。更改描述信息<code>s.summary</code>和<code>s.description</code>,默认版本0.1.0；更改源文件路径为<code>  s.source_files = &#39;SwiftUIKitExtensions/Classes/*&#39;</code>。</p><p><img src="/posts/b4fe90af/16433610816873.jpg" alt="配置podspec文件"></p><h3 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h3><p><img src="/posts/b4fe90af/16432163305848.jpg" alt="创建GitHub仓库"></p><h3 id="关联仓库"><a href="#关联仓库" class="headerlink" title="关联仓库"></a>关联仓库</h3><p>GitHub目前已经不提倡使用HTTPS协议Push代码了，所以关联仓库地址尽量使用SSH方式。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git remote add origin git@github<span class="hljs-selector-class">.com</span>:cba023/SwiftUIKitExtensions<span class="hljs-selector-class">.git</span><br>git branch -M <span class="hljs-selector-tag">main</span><br>git push -u origin main<br></code></pre></td></tr></table></figure><p>执行指令后仓库中就存在创建的库的文件了。</p><p><img src="/posts/b4fe90af/16432171923743.jpg" alt="成功上传到仓库"></p><h3 id="添加源文件"><a href="#添加源文件" class="headerlink" title="添加源文件"></a>添加源文件</h3><p>接下来我们就可以添加我们想要添加的源文件了。首先删除ReplaceMe文件；然后找到Classes目录(右键<code>Show in Finder</code>)，然后将Classes目录导入到工程中，如下图：</p><p><img src="/posts/b4fe90af/16433606163696.jpg" alt="源文件管理"></p><p><img src="/posts/b4fe90af/16433607281233.jpg" alt="源文件目录结构"></p><p><img src="/posts/b4fe90af/16433605487697.jpg" alt="工程中的源文件"></p><h3 id="对Pods库进行编辑"><a href="#对Pods库进行编辑" class="headerlink" title="对Pods库进行编辑"></a>对Pods库进行编辑</h3><p>然后编辑UIView+Extensions.Swift内容如下：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">import</span> UIKit<br><br><span class="hljs-keyword">extension</span> <span class="hljs-title class_">UIView</span> &#123;<br>    <br>    <span class="hljs-keyword">@discardableResult</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">func</span> <span class="hljs-title function_">_backgroundColor</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">backgroundColor</span>: <span class="hljs-type">UIColor</span>) -&gt; <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">self</span>.backgroundColor <span class="hljs-operator">=</span> backgroundColor<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span><br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="验证API调用"><a href="#验证API调用" class="headerlink" title="验证API调用"></a>验证API调用</h3><p>添加该API用于设定UIView及其子类实例的背景色并返回该实例。然后我们来测试下API是否能正常调用。</p><p><img src="/posts/b4fe90af/16433600562473.jpg"></p><p>显然的API已经能调用了，我们运行下App看看效果。根据代码的意思，App首页背景色变成浅灰色。如下：</p><p><img src="/posts/b4fe90af/8FE91E6D9E17.png" alt="972F-8FE91E6D9E17"></p><p>现在，我们的Pods已经是一个完整的Pods私有库了。那么如何发布到CocoaPods让它成为一个可供开源社区使用的Pods公有库呢，下一节详细介绍。</p><h2 id="上传为Pods公有库"><a href="#上传为Pods公有库" class="headerlink" title="上传为Pods公有库"></a>上传为Pods公有库</h2><p>接下来上传我们自己创建的Pods库到CocoaPods。<br>向 CocoaPods 注册账户信息。</p><h3 id="注册账户信息"><a href="#注册账户信息" class="headerlink" title="注册账户信息"></a>注册账户信息</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">pod trunk register <span class="hljs-tag">&lt;<span class="hljs-name">邮箱</span>&gt;</span> &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">用户名</span>&gt;</span>&#x27; --description=&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">描述</span>&gt;</span>&#x27;<br></code></pre></td></tr></table></figure><p><img src="/posts/b4fe90af/16433565887290.jpg"></p><p>然后邮箱会收到一封邮件。打开并点击，会提示：</p><p><img src="/posts/b4fe90af/16433567373040.jpg"></p><h3 id="验证个人账户"><a href="#验证个人账户" class="headerlink" title="验证个人账户"></a>验证个人账户</h3><p>然后我们检查下我们的个人信息。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">pod trunk <span class="hljs-keyword">me</span><br></code></pre></td></tr></table></figure><p><img src="/posts/b4fe90af/16433568428259.jpg"></p><h3 id="同步Git-Tag"><a href="#同步Git-Tag" class="headerlink" title="同步Git Tag"></a>同步Git Tag</h3><p>能清晰地看到自己的用户信息。那么接下来就可以上传我们的开源库了。将我们本次修改后的源码push到GitHub, 给当前节点打上Tag, 保持与版本号相同，即<code>0.1.0</code>。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> tag -a <span class="hljs-number">0</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span> -m <span class="hljs-string">&quot;v0.1.0&quot;</span><br></code></pre></td></tr></table></figure><p>推送标签：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> push origin <span class="hljs-number">0</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><img src="/posts/b4fe90af/16433574835737.jpg"></p><h3 id="验证并上传公有库"><a href="#验证并上传公有库" class="headerlink" title="验证并上传公有库"></a>验证并上传公有库</h3><ul><li>验证</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pod spec lint SwiftUIKitExtensions<span class="hljs-selector-class">.podspec</span> <span class="hljs-attr">--allow-warnings</span> <span class="hljs-attr">--verbose</span><br></code></pre></td></tr></table></figure><ul><li>验证成功</li></ul><p><img src="/posts/b4fe90af/16433611961072.jpg"></p><p>如果验证失败，控制台有响应错误提示，这时候请稍有耐心地检查并修复问题。</p><p>最后一步，推送仓库到CocoaPods。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">pod trunk <span class="hljs-built_in">push</span> SwiftUIKitExtensions.podspec --allow-<span class="hljs-built_in">warnings</span> --<span class="hljs-built_in">verbose</span><br></code></pre></td></tr></table></figure><p>执行上述命令后，执行推送仓库，推送成功后我们可以在控制台看到：</p><p><img src="/posts/b4fe90af/16433615144265.jpg"></p><p>已经成功了。自制的SwiftUIKitExtensions变成CocoaPods公有库。上传后一段时间（索引库更新后）我们就可以搜索到该库了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一气呵成，完全自建iOS内测分发平台</title>
    <link href="/posts/5b8e9f57/"/>
    <url>/posts/5b8e9f57/</url>
    
    <content type="html"><![CDATA[<h2 id="需要什么"><a href="#需要什么" class="headerlink" title="需要什么"></a>需要什么</h2><ul><li>XCode编译环境：用于编译iOS应用程序</li><li>openssl环境（用于生成自签SSL证书）</li><li>HTML分发网页（本文附相应文件链接，可以直接下载部署）</li><li>nginx环境：用于配置http和https服务</li><li>Jenkins 用于持续集成（远程构建）</li><li>可用于分发的iOS证书签名（如：adhoc签名，appstore签名）</li><li>本地git环境和远程git仓库（用于代码托管和持续集成代码拉取）</li></ul><h2 id="创建App"><a href="#创建App" class="headerlink" title="创建App"></a>创建App</h2><p>使用XCode创建一个iOS应用工程，命名<code>App1</code>。这里我们以Swift语言创建该工程。<br>我们将要对项目配置三个运行环境（Objective-C配置环境变量有稍许差异），分别如下：</p><table><thead><tr><th>名称</th><th>环境</th></tr></thead><tbody><tr><td>DEV</td><td>开发环境</td></tr><tr><td>UAT</td><td>预发布环境</td></tr><tr><td>PROD</td><td>生产环境</td></tr></tbody></table><p><img src="/posts/5b8e9f57/16313593511997.jpg" alt="创建一个Swift工程取名为App1"></p><p>接下来使用CocoaPods对工程进行管理。<br>打开终端，进入到工程目录，执行<code>pod init</code>和<code>pod install</code>。如下图:</p><p><img src="/posts/5b8e9f57/16313597724432.jpg" alt="使用CocoaPods管理项目"></p><p>为了让应用在分发时可以构建多个渠道的安装包，这里我们可以对它的环境进行参数化配置。<br>打开工程的<code>xcworkspace</code>文件，现在我们要对工程配置2个<code>Scheme</code>，创建完成后加上原有的Scheme总计3个。</p><p><img src="/posts/5b8e9f57/16313600323395.jpg" alt="创建多个Scheme"></p><p>创建好的Sheme列表如下：</p><p><img src="/posts/5b8e9f57/16313605902090.jpg" alt="创建好Sheme的效果"></p><p>在原有的两个<code>Build configuration</code>基础上再创建4个，分别让<code>Debug</code>和 <code>Release</code>对应<code>DEV</code>和<code>UAT</code>环境。</p><p><img src="/posts/5b8e9f57/16313605336870.jpg" alt="创建多个Build configuration"></p><p>为了让App变得完整接下来配置项目的图标信息。</p><p><img src="/posts/5b8e9f57/16313609168519.jpg" alt="配置项目的图标"></p><p>接下来关联Sheme和Build Configuraion（Debug和Release两种情况）。</p><p>对应关系如表所示：</p><table><thead><tr><th>Scheme</th><th>Debug</th><th>Release</th></tr></thead><tbody><tr><td>App1</td><td>Debug</td><td>Release</td></tr><tr><td>App1_DEV</td><td>Debug_DEV</td><td>Release_DEV</td></tr><tr><td>App1_UAT</td><td>Debug_UAT</td><td>Release_UAT</td></tr></tbody></table><p>效果如下：</p><p><img src="/posts/5b8e9f57/16313616461431.jpg" alt="关联Scheme和Build configuration"></p><p>接着在项目工程中配置环境变量，如图所示：</p><p><img src="/posts/5b8e9f57/16313620740617.jpg" alt="配置环境变量"></p><table><thead><tr><th>Build configuration</th><th>环境变量</th></tr></thead><tbody><tr><td>Debug</td><td>DEBUG</td></tr><tr><td>Debug_DEV</td><td>DEBUG ENVIOMENT_DEV</td></tr><tr><td>Debug_UAT</td><td>DEBUG ENVIOMENT_UAT</td></tr><tr><td>Release</td><td></td></tr><tr><td>Release_DEV</td><td>ENVIOMENT_DEV</td></tr><tr><td>Debug</td><td>ENVIOMENT_UAT</td></tr></tbody></table><p>然后就可以在代码中加入环境变量判断来控制源码编译实现不同环境的App的差异配置。</p><p>这里我们在不同环境下分别让App首页背景为不同颜色</p><table><thead><tr><th>环境</th><th>首页背景色</th></tr></thead><tbody><tr><td>DEV</td><td>红</td></tr><tr><td>UAT</td><td>绿</td></tr><tr><td>PROD</td><td>蓝</td></tr></tbody></table><p>首页使用环境变量来控制预编译。源码如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#if ENVIROMENT_DEV</span><br><span class="hljs-attr">view.backgroundColor</span> = .red<br><span class="hljs-attr">enviromentLabel.text</span> = <span class="hljs-string">&quot;DEV&quot;</span><br><span class="hljs-comment">#elseif ENVIROMENT_UAT</span><br><span class="hljs-attr">view.backgroundColor</span> = .green<br><span class="hljs-attr">enviromentLabel.text</span> = <span class="hljs-string">&quot;UAT&quot;</span><br><span class="hljs-comment">#else</span><br><span class="hljs-attr">view.backgroundColor</span> = .blue<br><span class="hljs-attr">enviromentLabel.text</span> = <span class="hljs-string">&quot;PROD&quot;</span><br><span class="hljs-comment">#endif</span><br></code></pre></td></tr></table></figure><p>例如：将Sheme选择为App_UAT，编译运行，即可看到设备上运行的App首页被金色变成了绿色，说明环境变量关联Scheme已经生效。</p><p><img src="/posts/5b8e9f57/16313625288256.jpg" alt="将Sheme选择为App_UAT"></p><p>页面展示效果：</p><p><img src="/posts/5b8e9f57/IMG_6FBAA7248B4F-1-1.png" alt="运行效果"></p><p>显然，通过选择不同的Sheme来关联环境变量还可以做更多的操作，比如网络接口地址等。</p><p>工程仓库已经上传到GitHub，可以下载参考。</p><blockquote><p>仓库地址：<a href="https://github.com/cba023/App1.git">https://github.com/cba023/App1.git</a> </p></blockquote><h2 id="使用XCode自带的Archive工具分发App"><a href="#使用XCode自带的Archive工具分发App" class="headerlink" title="使用XCode自带的Archive工具分发App"></a>使用XCode自带的Archive工具分发App</h2><p>更改应用的版本相关信息</p><p><img src="/posts/5b8e9f57/16313655115551.jpg" alt="更改应用的版本相关信息"></p><p>选着指定的Scheme执行归档，注意设备要选择<code>Any iOS Device</code>。</p><p><img src="/posts/5b8e9f57/%E6%88%AA%E5%B1%8F2021-09-11%20%E4%B8%8B%E5%8D%888.59.35-1.png" alt="归档"></p><p><img src="/posts/5b8e9f57/16313656804423.jpg" alt="归档完成，手动分发"></p><p><img src="/posts/5b8e9f57/16313656945752.jpg" alt="adhoc"></p><p><img src="/posts/5b8e9f57/16313676355825.jpg" alt="分发选项"></p><p><img src="/posts/5b8e9f57/16313664350798.jpg" alt="手动签名"></p><p><img src="/posts/5b8e9f57/16313664620752.jpg" alt="选择签名"></p><p><img src="/posts/5b8e9f57/16313678055421.jpg" alt="签名信息确认"></p><p><img src="/posts/5b8e9f57/16313666581843.jpg" alt="导出到目录"></p><p>备份ExportOptions.plist到iOS_Distribution，重命名为ExportOptions_adhoc.plist</p><p><img src="/posts/5b8e9f57/16313676957541.jpg" alt="生成的文件"></p><p>分发应用时涉及到证书配置、签名、和分发途径的相关信息，先使用Archive工具通过adhoc途径分发一次adhoc，获取<code>ExportOptions.plist</code>文件并备份。此处不细说，若有不熟之处，可上互联网搜索相关资料。</p><h2 id="导入分发网页"><a href="#导入分发网页" class="headerlink" title="导入分发网页"></a>导入分发网页</h2><p>将之前已经编写好的Web网页导入指定目录，这里我们指定<code>/Users/chenbo/DAPP</code>为Web服务根目录。Web网页的文件结构如下:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">/Users/chenbo/DAPP <br>├── detail<span class="hljs-selector-class">.html</span><br>├── index<span class="hljs-selector-class">.html</span><br>└── source<br>    ├── qrcode<span class="hljs-selector-class">.min</span><span class="hljs-selector-class">.js</span><br>    ├── reset<span class="hljs-selector-class">.css</span><br>    ├── style<span class="hljs-selector-class">.css</span><br>    └── vue<span class="hljs-selector-class">.global</span><span class="hljs-selector-class">.prod</span><span class="hljs-selector-class">.js</span><br><br><span class="hljs-number">1</span> directory, <span class="hljs-number">6</span> files<br></code></pre></td></tr></table></figure><blockquote><p>分发网页Git仓库地址：<a href="https://github.com/cba023/iOS_DistributionAssets.git">https://github.com/cba023/iOS_DistributionAssets.git</a></p></blockquote><h2 id="生成自签SSL证书"><a href="#生成自签SSL证书" class="headerlink" title="生成自签SSL证书"></a>生成自签SSL证书</h2><p>首先获取本机IP地址方便项目的配置与部署。Mac上查看IP地址非常简单，可在<code>系统偏好设置</code>-&gt;<code>网络</code>中可以查看。</p><p><img src="/posts/5b8e9f57/16313556458596.jpg" alt="获取IP"></p><p>创建公私钥文件夹</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">mkdir -p <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>ssl/<span class="hljs-keyword">private</span><br>mkdir -p <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>ssl/certs<br></code></pre></td></tr></table></figure><p>创建秘钥和证书</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo openssl req \<br>  -x509 -nodes -days <span class="hljs-number">365</span> -newkey rsa:<span class="hljs-number">2048</span> \<br>  -keyout <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>ssl<span class="hljs-regexp">/private/</span>self-signed.key \<br>  -out <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>ssl<span class="hljs-regexp">/certs/</span>self-signed.crt<br></code></pre></td></tr></table></figure><p>输入指定后需要填写证书的一些信息，<code>Common Name</code>需要填写为自定义的域名，这里我把它设成了本机的IP地址。</p><p><img src="/posts/5b8e9f57/16313530054647.jpg" alt="生成自签证书"></p><p>然后打开<code>/usr/local/etc/ssl</code>目录，<code>private</code>和<code>certs</code>文件夹分别生成了私钥和证书。</p><p><code>/Users/chenbo/DAPP</code>目录下创建一个<code>ssl</code>子目录，再把<code>self-signed.crt</code>拷贝一份到<code>ssl</code>中，用于分发网页中的SSL证书下载。</p><h2 id="安装和使用nginx"><a href="#安装和使用nginx" class="headerlink" title="安装和使用nginx"></a>安装和使用nginx</h2><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>安装nginx有多种方式，这里我们使用brew来安装，如果你的Mac上没有安装brew环境，可以去网上了解下brew的安装教程。</p><p>执行以下指令，brew会自动安装nginx：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>nginx<br></code></pre></td></tr></table></figure><p>安装完成后在终端输入：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">nginx -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p><img src="/posts/5b8e9f57/16313545042832.jpg" alt="nginx版本查看"></p><p>如果显示了nginx版本即表示已经安装成功。</p><h3 id="配置nginx的http和https服务"><a href="#配置nginx的http和https服务" class="headerlink" title="配置nginx的http和https服务"></a>配置nginx的http和https服务</h3><p>由于苹果官方要求分发应用必须使用https协议，而我们自己搭建服务使用了自签证书，需要先使用http服务下载证书后才能正常使用https服务，所以这里我们同时配置http和https服务。</p><p>使用访达打开<code>/usr/local/etc/nginx</code>目录，编辑<code>nginx.conf</code>文件。如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">server &#123;<br>        listen       <span class="hljs-number">80</span>;<br>        listen       <span class="hljs-number">443</span> ssl;<br>        server_name  localhost;<br>        <span class="hljs-comment"># ssl on;</span><br>        <span class="hljs-comment"># location of ssl certificate</span><br>        ssl_certificate <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>ssl<span class="hljs-regexp">/certs/</span>self-signed.crt;<br>        <span class="hljs-comment"># location of ssl key</span><br>        ssl_certificate_key <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/etc/</span>ssl<span class="hljs-regexp">/private/</span>self-signed.key;<br><br>        ssl_session_cache    shared:SSL:<span class="hljs-number">1</span>m;<br>        ssl_session_timeout  <span class="hljs-number">5</span>m;<br><br>        ssl_ciphers  HIGH:!aNULL:!MD5;<br>        ssl_prefer_server_ciphers  on;<br><br>        location / &#123;<br>            root   <span class="hljs-regexp">/Users/</span>chenbo/DAPP;<br>            index  index.html index.htm;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>上述配置开启了80和443端口，即开启了http和https服务， ssl_certificate和ssl_certificate_key分别对应的自签名证书和私钥的路径，和openssl生成的路径保持一致。<br>这里有一点要注意，<code>/Users/chenbo/DAPP</code>是我设定的nginx服务根目录，该目录和上一小节中的HTML存放路径保持一致。</p><p>接下来就可以启动nginx服务了。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">brew services <span class="hljs-literal">start</span> nginx<br></code></pre></td></tr></table></figure><p>如下图所示，nginx成功启动。</p><p><img src="/posts/5b8e9f57/16313564238231.jpg" alt="启动nginx"></p><p>打开Mac的<code>系统偏好设置</code>-&gt;<code>安全与隐私</code>-&gt;<code>防火墙</code>-&gt;<code>关闭</code>，即关闭Mac的防火墙。</p><p>接着在浏览器中打开我们之前设定的服务地址。</p><blockquote><p><a href="http://192.168.0.103/">http://192.168.0.103</a></p></blockquote><p><img src="/posts/5b8e9f57/16313566761127.jpg" alt="打开分发网页"></p><h3 id="配置iOS应用分发Shell脚本"><a href="#配置iOS应用分发Shell脚本" class="headerlink" title="配置iOS应用分发Shell脚本"></a>配置iOS应用分发Shell脚本</h3><blockquote><p>Shell脚本下载地址：<a href="https://github.com/cba023/iOS_DistributionAssets.git">https://github.com/cba023/iOS_DistributionAssets.git</a></p></blockquote><p>把<code>iOS_Distribution</code>目录拷贝到用户文件夹。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">/Users/chenbo/iOS_Distribution<br>├── AutoSh<br>│   ├── ExportOptions_adhoc<span class="hljs-selector-class">.plist</span><br>│   └── distribute<span class="hljs-selector-class">.sh</span><br>└── Others<br>    ├── base<span class="hljs-selector-class">.plist</span><br>    └── blank<span class="hljs-selector-class">.plist</span><br><br><span class="hljs-number">2</span> directories, <span class="hljs-number">4</span> files<br></code></pre></td></tr></table></figure><ul><li><p><code>ExportOptions_adhoc.plist</code>是之前使用XCode打包时生成的<code>ExportOptions.plist</code>重命名而来，包含了项目的构建信息。</p></li><li><p><code>distribute.sh</code>文件需做稍许更改</p><ul><li><code>__APP_NAME=&quot;APP1&quot;</code> # 应用的名称这里固定</li><li><code>__HOST=&quot;192.168.0.103&quot;</code> # Host指定为nginx服务的IP地址</li></ul></li><li><p>Other目录下有两个plist文件，后面在脚本运行时能调用到，请不要自行修改文件内容</p><ul><li>blank.plist: 空属性列表文件，用于脚本执行写入分发记录信息</li><li>base.plist: 用于写入App远程安装时的远程配置信息</li></ul></li></ul><h3 id="检查完善DAPP目录的文件与配置"><a href="#检查完善DAPP目录的文件与配置" class="headerlink" title="检查完善DAPP目录的文件与配置"></a>检查完善DAPP目录的文件与配置</h3><p>DAPP即<code>/Users/chenbo/DAPP</code>目录，从上文已经得知在DAPP中已经包含了下列文件：</p><ul><li><code>分发网页</code>相关文件</li><li><code>ssl</code>证书文件</li></ul><p>在DAPP中创建images目录，并导入应用分发时要用到的两个尺寸的Logo文件，格式png。</p><table><thead><tr><th>文件名</th><th>分辨率</th></tr></thead><tbody><tr><td>image_57x57.png</td><td>57 * 57</td></tr><tr><td>image_512x512.png</td><td>512 * 512</td></tr></tbody></table><p>导入后DAPP目录内容如下：</p><p><img src="/posts/5b8e9f57/16313693508175.jpg" alt="检查DAPP目录"></p><p>现在就可以通过脚本来构建分发应用了。</p><h2 id="使用Shell直接构建App并分发"><a href="#使用Shell直接构建App并分发" class="headerlink" title="使用Shell直接构建App并分发"></a>使用Shell直接构建App并分发</h2><p>把iOS_Distribution目录下的AutoSh目录拷贝到App1的工程根目录，然后使用终端打开工程根目录下的AutoSh，执行：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sh </span><span class="hljs-keyword">distribute.sh </span>-h<br></code></pre></td></tr></table></figure><p>可以看到：<br><img src="/posts/5b8e9f57/16313697227843.jpg" alt="分发脚本选项列表"></p><p>终端显示了脚本的使用方法，这里我们执行下列指令：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sh </span><span class="hljs-keyword">distribute.sh </span>-<span class="hljs-keyword">b </span>Release -s App1 -u <span class="hljs-string">&quot;修复问题若干；优化性能若干；增加功能若干；XXX xx,XXX_XX&quot;</span><br></code></pre></td></tr></table></figure><p>执行，如下图所示，终端窗口自动将更更新内容显示出来了，并展示了更多的日志信息。</p><p><img src="/posts/5b8e9f57/16313699257137.jpg" alt="执行分发脚本后的效果"></p><p>直到构建完成。</p><p><img src="/posts/5b8e9f57/16313700902794.jpg" alt="构建完成脚本展示提示"></p><p>此时我们打开分发的网页地址，发现历史版本中多了一项记录，即刚才构建的项目。</p><p><img src="/posts/5b8e9f57/16313702448008.jpg" alt="构建分发完成后分发网页会多一条构建记录"></p><p>尝试更改App1工程内的版本信息，再次执行分发指令，并尝试更改工程的Scheme为App1_DEV或App1：<br><img src="/posts/5b8e9f57/16313704918921.jpg" alt="更改XCode工程中的版本号"></p><ul><li>分发DEV环境的包</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sh </span><span class="hljs-keyword">distribute.sh </span>-<span class="hljs-keyword">b </span>Release_DEV -s App1_DEV -u <span class="hljs-string">&quot;版本改 为1.0.1；&quot;</span><br></code></pre></td></tr></table></figure><ul><li>分发UAT环境的包</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">sh </span><span class="hljs-keyword">distribute.sh </span>-<span class="hljs-keyword">b </span>Release_UAT -s App1_UAT -u <span class="hljs-string">&quot;UAT；&quot;</span><br></code></pre></td></tr></table></figure><p>分发的网页地址多了两条记录，而且筛选菜单也有了多种选项可以筛选版本号和构建类型。</p><p><img src="/posts/5b8e9f57/16313719876152.jpg" alt="多次构建不同版本和渠道的应用"></p><p>我们点击一条记录。</p><p><img src="/posts/5b8e9f57/16313720304384.jpg" alt="Mac端上的分发详情页"></p><p>即跳转到了单次分发的详情页，该页面真实了APP1本次构建的详细信息，包括构建的一些参数和更新内容。<br>如果手机和构建的Mac主机是处于一个局域网内且Mac主机关机了防火墙，则可以实现扫码安装该应用包（保证当前签名已经录入了安装手机的UDID情况方能使用）。</p><p><img src="/posts/5b8e9f57/16313722963400.jpg" alt="iOS移动设备上的分发详情页"></p><p>手机扫码后Safari浏览器打开分发详情页，首次安装App前需要点击页面左下角的<code>安装SSL</code>证书（描述文件），并去手机<code>设置</code>-&gt;<code>通用</code>-&gt;<code>关于本机</code>中信任该描述文件，然再点击<code>点击安装</code>字样按钮。</p><p><img src="/posts/5b8e9f57/16313725599837.jpg" alt="点击安装"></p><p>然后就自动安装到手机上了。</p><p><img src="/posts/5b8e9f57/16313726363763.jpg" alt="安装完成"></p><h2 id="使用Jenkins来管理应用分发"><a href="#使用Jenkins来管理应用分发" class="headerlink" title="使用Jenkins来管理应用分发"></a>使用Jenkins来管理应用分发</h2><blockquote><p>Jenkins安装教程：<a href="https://gitee.com/jenkins-zh">https://gitee.com/jenkins-zh</a> 或 <a href="https://www.jenkins.io/">https://www.jenkins.io</a> 。<br>Jenkins安装好后需要配置环境变量才能保证可以调用Shell中的指令，可进入Jenkins<code>系统管理</code>-&gt;<code>系统配置</code>-&gt;<code>全局属性</code>-&gt;<code>环境变量</code>中配置<code>PATH</code>，PATH内容可以从Mac终端中输入<code>echo $PATH</code>打印的内容拷贝过来。</p></blockquote><p><img src="/posts/5b8e9f57/16314183580078.jpg" alt="Jenkins首页"></p><p><img src="/posts/5b8e9f57/16314184350345.jpg" alt="创建任务"></p><p><img src="/posts/5b8e9f57/16314191691845.jpg" alt="配置构建参数Scheme"></p><p><img src="/posts/5b8e9f57/16314192474799.jpg" alt="配置构建参数下载HOST"></p><p><img src="/posts/5b8e9f57/16314192927252.jpg" alt="配置构建参数更新内容"></p><p><img src="/posts/5b8e9f57/16314188885001.jpg" alt="源码管理"></p><p><img src="/posts/5b8e9f57/16314193215492.jpg" alt="选择配置Shell"></p><p><img src="/posts/5b8e9f57/16314193632275.jpg" alt="配置Shell内容"></p><p>Jenkins中配置的Shell，可以实现Jenkins参数化运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-built_in">export</span> LANG=<span class="hljs-string">&quot;en_US.UTF-8&quot;</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$&#123;SCHEME&#125;</span> == <span class="hljs-string">&quot;App1_DEV&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    __BUILD_CONF=<span class="hljs-string">&quot;Release_DEV&quot;</span><br><span class="hljs-keyword">elif</span> [[ <span class="hljs-variable">$&#123;SCHEME&#125;</span> == <span class="hljs-string">&quot;App1_UAT&quot;</span> ]]; <span class="hljs-keyword">then</span><br>    __BUILD_CONF=<span class="hljs-string">&quot;Release_UAT&quot;</span><br><span class="hljs-keyword">else</span><br>    __BUILD_CONF=<span class="hljs-string">&quot;Release&quot;</span><br><span class="hljs-keyword">fi</span><br><br>__UPDATES=<span class="hljs-variable">$&#123;UPDATES&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;__UPDATES:<span class="hljs-variable">$&#123;__UPDATES&#125;</span>&quot;</span><br>__UPDATES_LENGTH=<span class="hljs-variable">$&#123;#__UPDATES&#125;</span><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$&#123;__UPDATES_LENGTH&#125;</span> -lt 1 ]]; <span class="hljs-keyword">then</span><br>    __UPDATES=$(git <span class="hljs-built_in">log</span> --format=%B -n 1 HEAD)<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Jenkins -&gt; SCHEME: <span class="hljs-variable">$&#123;SCHEME&#125;</span>, __BUILD_CONF: <span class="hljs-variable">$&#123;__BUILD_CONF&#125;</span>&quot;</span><br><span class="hljs-built_in">cp</span> -rf /Users/`<span class="hljs-built_in">whoami</span>`/iOS_Distribution/AutoSh/ <span class="hljs-variable">$&#123;WORKSPACE&#125;</span>/AutoSh/<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;WORKSPACE&#125;</span>/AutoSh/<br><br>sh <span class="hljs-variable">$&#123;WORKSPACE&#125;</span>/AutoSh/distribute.sh -a <span class="hljs-variable">$&#123;DOWNLOAD_HOST&#125;</span> -s <span class="hljs-variable">$&#123;SCHEME&#125;</span> -b <span class="hljs-variable">$&#123;__BUILD_CONF&#125;</span> -u <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;__UPDATES&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>点击保存。</p><p><img src="/posts/5b8e9f57/16314195064492.jpg" alt="点击保存"></p><p>参数化构建。<br><img src="/posts/5b8e9f57/16314203058436.jpg" alt="参数化构建"></p><p>设定构建的参数。<br><img src="/posts/5b8e9f57/16314205114729.jpg" alt="执行参数化构建"></p><p>开始构建后可以看到构建进度。<br><img src="/posts/5b8e9f57/16314205700056.jpg" alt="选择构建参数"></p><p>可从构建任务重选择查看控制台输出的日志。<br><img src="/posts/5b8e9f57/16314206137544.jpg" alt="选择控制台展示"></p><p>日志显示任务完成。<br><img src="/posts/5b8e9f57/16314206451023.jpg" alt="控制台展示"></p><p>构建成功，然后进入分发网页，即看到分发记录里又多了一条记录。接着就可以使用逸动设备扫码安装应用了。</p><p><img src="/posts/5b8e9f57/16314207467470.jpg" alt="分发网页多了一条记录"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>UITableViewAgent：一个闭包搞定UITableView的代理实现</title>
    <link href="/posts/b72a2539/"/>
    <url>/posts/b72a2539/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/cba023/UITableViewAgent.git">https://github.com/cba023/UITableViewAgent.git</a></p></blockquote><h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><p>要运行示例项目，克隆仓库，并首先从<code>Example</code>目录运行’ pod install ‘。</p><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><p>UITableViewAgent可以通过<a href="https://cocoapods.org/">CocoaPods</a>获得。安装<br>在你的Podfile中添加以下代码:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">pod <span class="hljs-string">&#x27;UITableViewAgent&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>运行条件：iOS 9.0+ (Swift 5+)</p></blockquote><p>UITableViewAgent可以承担UITableViewDataSource和UITableDelegate的指责，让TableView的编码变得更加容易和充满乐趣。为什么要使用UITableViewAgent呢？请看下文。</p><h3 id="使用UITableViewDataSource和UITableViewDelegate实现TableView数据呈现"><a href="#使用UITableViewDataSource和UITableViewDelegate实现TableView数据呈现" class="headerlink" title="使用UITableViewDataSource和UITableViewDelegate实现TableView数据呈现"></a>使用UITableViewDataSource和UITableViewDelegate实现TableView数据呈现</h3><p>让我们来看看传统的TableView编码：</p><ul><li>设置tableView的代理</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Swift">tableView.dataSource <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span><br>tableView.delegate <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>    <br></code></pre></td></tr></table></figure><ul><li>代理回调</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-keyword">func</span> <span class="hljs-title function_">tableView</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">tableView</span>: <span class="hljs-type">UITableView</span>, <span class="hljs-params">numberOfRowsInSection</span> <span class="hljs-params">section</span>: <span class="hljs-type">Int</span>) -&gt; <span class="hljs-type">Int</span> &#123;<br>    <span class="hljs-keyword">if</span> section <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.news.newslist<span class="hljs-operator">?</span>.count <span class="hljs-operator">??</span> <span class="hljs-number">0</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> section <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">tableView</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">tableView</span>: <span class="hljs-type">UITableView</span>, <span class="hljs-params">heightForRowAt</span> <span class="hljs-params">indexPath</span>: <span class="hljs-type">IndexPath</span>) -&gt; <span class="hljs-type">CGFloat</span> &#123;<br>    <span class="hljs-keyword">if</span> indexPath.section <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-type">UITableView</span>.automaticDimension<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> indexPath.section <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">80.0</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">100.0</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">func</span> <span class="hljs-title function_">tableView</span>(<span class="hljs-keyword">_</span> <span class="hljs-params">tableView</span>: <span class="hljs-type">UITableView</span>, <span class="hljs-params">cellForRowAt</span> <span class="hljs-params">indexPath</span>: <span class="hljs-type">IndexPath</span>) -&gt; <span class="hljs-type">UITableViewCell</span> &#123;<br>    <span class="hljs-keyword">if</span> indexPath.section <span class="hljs-operator">==</span> <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">let</span> cell <span class="hljs-operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="hljs-string">&quot;NewsListTableViewCell&quot;</span>, for: <span class="hljs-type">IndexPath</span>) <span class="hljs-keyword">as!</span> <span class="hljs-type">NewsListTableViewCell</span><br>        cell.lblTitle.text <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.news.newslist<span class="hljs-operator">!</span>[indexPath.row].title<br>        cell.lblSubTitle.text <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.news.newslist<span class="hljs-operator">!</span>[indexPath.row].source<br>        <span class="hljs-keyword">return</span> cell<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> indexPath.section <span class="hljs-operator">==</span> <span class="hljs-number">1</span> &#123;<br>        <span class="hljs-keyword">let</span> cell <span class="hljs-operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="hljs-string">&quot;AppliancesTableViewCell&quot;</span>, for: <span class="hljs-type">IndexPath</span>) <span class="hljs-keyword">as!</span> <span class="hljs-type">AppliancesTableViewCell</span>.<span class="hljs-keyword">self</span><br>        cell.lblName.text <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.appliances<span class="hljs-operator">!</span>.name<br>        cell.lblColor.text <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span>.appliances<span class="hljs-operator">!</span>.color<br>        cell.lblPrice.text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-subst">\(<span class="hljs-keyword">self</span>.appliances<span class="hljs-operator">!</span>.price)</span>&quot;</span><br>        <span class="hljs-keyword">return</span> cell<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">let</span> cell <span class="hljs-operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="hljs-string">&quot;PersonTCell.self&quot;</span>, for: <span class="hljs-type">IndexPath</span>) <span class="hljs-keyword">as!</span> <span class="hljs-type">PersonTCell</span><br>        cell.lblName.text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;人物 - <span class="hljs-subst">\(indexPath.row)</span>&quot;</span><br>        <span class="hljs-keyword">return</span> cell<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>嗯…这里实现了一个多类型Cell和多种数据的TableView列表展示，这里没有列举出Header与Footer的复用，也没有列出Cell选中某行时的回调。<br>类似这样的代码实现有诸多的<strong>缺点</strong>：</p><ul><li><strong>代码量大</strong>：实现简单的功能需要大量代码，影响开发效率。</li><li><strong>灵活性差</strong>：配置数据和UI不够灵活，多个类的复用视图的处理需要繁琐判断，开发者需要自行计算索引值已经行数等不必要的数据。</li><li><strong>可阅读性差</strong>：为了遵守TableView的代理函数，形式上写入大量代码，却没有直观地凸显出数据和UI。</li></ul><h3 id="使用UITableViewAgent实现TableView数据呈现"><a href="#使用UITableViewAgent实现TableView数据呈现" class="headerlink" title="使用UITableViewAgent实现TableView数据呈现"></a>使用UITableViewAgent实现TableView数据呈现</h3><h4 id="定制Cell数据行"><a href="#定制Cell数据行" class="headerlink" title="定制Cell数据行"></a>定制Cell数据行</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Swift">tableViewAgent <span class="hljs-operator">=</span> <span class="hljs-type">UITableViewAgent</span>(tableView: tableView, display: <span class="hljs-type">UITableViewDisplay</span>(&#123; sections <span class="hljs-keyword">in</span><br>    sections.append(<span class="hljs-type">UITableViewSectionDisplay</span>(&#123; rows <span class="hljs-keyword">in</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span><span class="hljs-operator">..&lt;</span><span class="hljs-number">10</span> &#123;<br>            rows.append(<span class="hljs-type">UITableViewRowDisplay</span>(cellHeight: <span class="hljs-number">60</span>, cellType: <span class="hljs-type">UITableViewCell</span>.<span class="hljs-keyword">self</span>, reuseType: .anyClass) &#123; tableView, indexPath, cell <span class="hljs-keyword">in</span><br>                cell.textLabel<span class="hljs-operator">?</span>.text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;row: _ <span class="hljs-subst">\(i)</span>&quot;</span><br>            &#125; didSelectRowAtIndexPath: &#123;[<span class="hljs-keyword">weak</span> <span class="hljs-keyword">self</span>] tableView, indexPath, cell <span class="hljs-keyword">in</span><br>                <span class="hljs-keyword">guard</span> <span class="hljs-keyword">let</span> <span class="hljs-keyword">self</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">self</span> <span class="hljs-keyword">else</span> &#123; <span class="hljs-keyword">return</span> &#125;<br>                <span class="hljs-keyword">let</span> vc <span class="hljs-operator">=</span> <span class="hljs-type">TraditionalListViewController</span>()<br>                <span class="hljs-keyword">self</span>.navigationController<span class="hljs-operator">?</span>.pushViewController(vc, animated: <span class="hljs-literal">true</span>)<br>            &#125;)<br>        &#125;<br>    &#125;))<br>&#125;))<br></code></pre></td></tr></table></figure><p>只需要这里少许的代码即可实现10行行高为50.0像素点,类型为<code>UITableViewCell</code>的Cell，选中某一行时，通过其中<code>didSelectRowAtIndexPath</code>回调方法实现响应的操作。<br>当然，功能远远不只这么简单，若需要比较复杂的需求，它的优势将体现得更加明显。</p><p>比如：</p><ul><li>Cell行数免计算灵活配置</li><li>各行Cell高度灵活配置</li><li>各行Cell类型与复用形式灵活配置</li><li>各行Cell的数据展示灵活配置</li><li>各行Cell点击响应事件的灵活配置</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-comment">// 添加一行Cell展示动物信息</span><br>rows.append(<span class="hljs-type">UITableViewRowDisplay</span>(cellHeight: <span class="hljs-number">100</span>, cellType: <span class="hljs-type">PersonTCell</span>.<span class="hljs-keyword">self</span>, reuseType: .nib) &#123; tableView, indexPath, cell <span class="hljs-keyword">in</span><br>    cell.name.text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Panda&quot;</span><br>    cell.country.text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;China&quot;</span><br>&#125; didSelectRowAtIndexPath: &#123; tableView, indexPath, cell  <span class="hljs-keyword">in</span><br>    <span class="hljs-comment">// 选中动物Cell后回调</span><br>    tableView.deselectRow(at: indexPath, animated: <span class="hljs-literal">true</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Animal is selected:&quot;</span>, tableView, indexPath, cell)<br>&#125;)<br><br><span class="hljs-comment">// 添加若干行Cell展示人物信息</span><br><span class="hljs-keyword">for</span> (i, person) <span class="hljs-keyword">in</span> persons.enumerated() &#123;<br>    rows.append(<span class="hljs-type">UITableViewRowDisplay</span>(cellHeight: <span class="hljs-number">60</span>, cellType: <span class="hljs-type">PersonCell</span>.<span class="hljs-keyword">self</span>, reuseType: .anyClass) &#123; tableView, indexPath, cell <span class="hljs-keyword">in</span><br>        cell.numberLabel.text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Number is: <span class="hljs-subst">\(i)</span>&quot;</span><br>        cell.nameLabel.text <span class="hljs-operator">=</span> person.name<br>        cell.genderLabel.text <span class="hljs-operator">=</span> person.gender<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 添加电器Cell展示电视信息</span><br>rows.append(<span class="hljs-type">UITableViewRowDisplay</span>(cellHeight: <span class="hljs-number">120</span>, cellType: <span class="hljs-type">AppliancesTableViewCell</span>.<span class="hljs-keyword">self</span>, reuseType: .nib) &#123; tableView, indexPath, cell <span class="hljs-keyword">in</span><br>    cell.lblName.text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;TV&quot;</span><br>&#125; didSelectRowAtIndexPath: &#123; tableView, indexPath, cell  <span class="hljs-keyword">in</span><br><span class="hljs-comment">// 选中电器Cell后回调</span><br>    tableView.deselectRow(at: indexPath, animated: <span class="hljs-literal">true</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is a TV&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="定制数据组"><a href="#定制数据组" class="headerlink" title="定制数据组"></a>定制数据组</h4><p>下列是展示一个新闻相关的组：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-comment">// 增加新闻section, header高度45，不允许自动行高(自动行高需要Cell的约束支持，即内容决定Cell高度)，header复用形式为XIB，类型为NewsListTableHeaderView</span><br>sections.append(<span class="hljs-type">UITableViewSectionDisplay</span>(headerHeight: <span class="hljs-number">45.0</span>, isAutoHeaderHeight: <span class="hljs-literal">false</span>, headerReuse:.nib(<span class="hljs-type">NewsListTableHeaderView</span>.<span class="hljs-keyword">self</span>, &#123; tabelView, section, header <span class="hljs-keyword">in</span><br><span class="hljs-comment">// 给header设置标题</span><br>    header.lblName.text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;News Header&quot;</span><br>&#125;), &#123; rows <span class="hljs-keyword">in</span><br>    <span class="hljs-comment">// row.append(XXX)</span><br>    <span class="hljs-comment">// row.append(XXX)</span><br>&#125;, footerHeight: <span class="hljs-number">50.0</span>, isAutoFooterHeight: <span class="hljs-literal">false</span>, footerReuse: .anyClass(<span class="hljs-type">NewsListTableFooterView</span>.<span class="hljs-keyword">self</span>, &#123; tableView, section, footer <span class="hljs-keyword">in</span><br><span class="hljs-comment">// footer高度50，不允许自动行高，header复用形式为anyClass，类型为NewsListTableFooterView,设置文本标签展示内容</span><br>    footer.lblDesc.text <span class="hljs-operator">=</span> <span class="hljs-string">&quot;News Footer&quot;</span><br>&#125;)))<br></code></pre></td></tr></table></figure><p>header和footer的复用参数（headerHeight和footerReuse）可以设定类型如下：</p><ul><li>.anyClass: 纯代码型视图，继承自UIView。</li><li>.nib: XIB型视图，继承自UITableHeaderFooterView。</li><li>.none: 不设定Header或Footer。</li></ul><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>Chen Bo（陈波）, <a href="mailto:&#99;&#98;&#97;&#48;&#50;&#x33;&#x40;&#104;&#x6f;&#x74;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;">&#99;&#98;&#97;&#48;&#50;&#x33;&#x40;&#104;&#x6f;&#x74;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;</a></p><h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><p>UITableViewAgent在MIT许可下可用。查看许可文件以获得更多信息。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TableViewReuse，一句话搞定TableViewCell、Header或Footer的复用</title>
    <link href="/posts/939d9a6c/"/>
    <url>/posts/939d9a6c/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/cba023/TableViewReuse">https://github.com/cba023/TableViewReuse</a></p></blockquote><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>TableViewCell、TableViewHeader和TableViewFooter的复用比传统的方式更简单</li><li>免去了TableViewCell的注册</li><li>同时支持Objective-C和Swift语言</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>要运行示例项目，在工程的Podfile中引入<code>TableViewReuse</code>，运行’ pod install ‘。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>TableViewReuse可以通过<a href="https://cocoapods.org/">CocoaPods</a>获得。安装<br>在你的Podfile中添加以下代码:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">pod <span class="hljs-string">&#x27;TableViewReuse&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我们可以直接在Swift中使用它，我在Objective-C中 <code>import &lt;TableViewReuse-umbrella.h&gt;</code>来使用它</p><h3 id="Swift场景"><a href="#Swift场景" class="headerlink" title="Swift场景"></a>Swift场景</h3><h4 id="复用-Nib-类型-TableViewCell"><a href="#复用-Nib-类型-TableViewCell" class="headerlink" title="复用 Nib 类型 TableViewCell"></a>复用 Nib 类型 TableViewCell</h4><p>传统风格:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-comment">// Register cell</span><br>tableView.register(<span class="hljs-type">UINib</span>(nibName: <span class="hljs-string">&quot;NibListTableViewCell&quot;</span>, bundle: <span class="hljs-literal">nil</span>), forCellReuseIdentifier: <span class="hljs-string">&quot;NibListTableViewCell&quot;</span>)<br><span class="hljs-comment">// Dequeue reusable cells</span><br>tableView.dequeueReusableCell(withIdentifier: <span class="hljs-string">&quot;NibListTableViewCell&quot;</span>, for: indexPath)<br></code></pre></td></tr></table></figure><p>可以看到，传统的重用tableViewCell方法很麻烦。</p><p>现在:</p><p>我们有更简便的方式来实现它。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-comment">// Call the Swift API for Nib type TableViewCell</span><br><span class="hljs-keyword">let</span> cell <span class="hljs-operator">=</span> tableView.dequeueReusableCell(nibClass: <span class="hljs-type">NibListTableViewCell</span>.<span class="hljs-keyword">self</span>)<br><span class="hljs-comment">// Call the Objective-C API for Nib type TableViewCell</span><br><span class="hljs-keyword">let</span> cell <span class="hljs-operator">=</span> tableView.dequeueReusableCell(withNibClass: <span class="hljs-type">NibListTableViewCell</span>.<span class="hljs-keyword">self</span>) <span class="hljs-keyword">as!</span> <span class="hljs-type">NibListTableViewCell</span><br></code></pre></td></tr></table></figure><h4 id="重用手写代码类型的TableViewCell"><a href="#重用手写代码类型的TableViewCell" class="headerlink" title="重用手写代码类型的TableViewCell"></a>重用手写代码类型的TableViewCell</h4><p>传统风格:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-comment">// Register cell</span><br>tableView.register(<span class="hljs-type">AnyClassTableViewCell</span>.<span class="hljs-keyword">self</span>, forCellReuseIdentifier: <span class="hljs-string">&quot;AnyClassTableViewCell&quot;</span>)<br><span class="hljs-comment">// Dequeue reusable cells</span><br>tableView.dequeueReusableCell(withIdentifier: <span class="hljs-string">&quot;AnyClassTableViewCell&quot;</span>, for: indexPath)<br></code></pre></td></tr></table></figure><p>现在:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Swift"><span class="hljs-comment">// Call the Swift API for Any class TableViewCell</span><br><span class="hljs-keyword">let</span> cell <span class="hljs-operator">=</span> tableView.dequeueReusableCell(anyClass: <span class="hljs-type">AnyClassTableViewCell</span>.<span class="hljs-keyword">self</span>)<br><span class="hljs-comment">// Call the Objective-C API for Any class TableViewCell</span><br><span class="hljs-keyword">let</span> cell <span class="hljs-operator">=</span> tableView.dequeueReusableCell(withAnyClass: <span class="hljs-type">AnyClassTableViewCell</span>.<span class="hljs-keyword">self</span>) <span class="hljs-keyword">as!</span> <span class="hljs-type">AnyClassTableViewCell</span><br></code></pre></td></tr></table></figure><h3 id="Objective-场景"><a href="#Objective-场景" class="headerlink" title="Objective-场景"></a>Objective-场景</h3><h4 id="复用-Nib-类型-TableViewCell-1"><a href="#复用-Nib-类型-TableViewCell-1" class="headerlink" title="复用 Nib 类型 TableViewCell"></a>复用 Nib 类型 TableViewCell</h4><p>传统风格:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Objective-C">// Register cell<br>[tableView registerNib:[UINib nibWithNibName:@&quot;NibListTableViewCell&quot; bundle:nil] forCellReuseIdentifier:@&quot;NibListTableViewCell&quot;];<br>// Dequeue reusable cells<br>NibListTableViewCell *cell = tableView.dequeueReusableCell(withIdentifier: &quot;NibListTableViewCell&quot;, for: indexPath)<br></code></pre></td></tr></table></figure><p>现在:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Objective-C">NibListTableViewCell *cell = [tableView dequeueReusableCellWithNibClass:NibListTableViewCell.class];<br></code></pre></td></tr></table></figure><h4 id="重用手写代码类型的TableViewCell-1"><a href="#重用手写代码类型的TableViewCell-1" class="headerlink" title="重用手写代码类型的TableViewCell"></a>重用手写代码类型的TableViewCell</h4><p>传统风格:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Objective-C">// Register cell<br>[tableView registerClass:AnyClassTableViewCell.class forCellReuseIdentifier:@&quot;AnyClassTableViewCell&quot;];<br>// Dequeue reusable cells<br>AnyClassTableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@&quot;AnyClassTableViewCell&quot; forIndexPath:indexPath];<br></code></pre></td></tr></table></figure><p>现在:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Objective-C">AnyClassTableViewCell *cell = [tableView dequeueReusableCellWithAnyClass:AnyClassTableViewCell.class];<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Hexo搭建个人博客网站 
</title>
    <link href="/posts/8953dfef/"/>
    <url>/posts/8953dfef/</url>
    
    <content type="html"><![CDATA[<blockquote><p>该案例是在Mac OS环境下实现，其他平台可以借鉴但不能完全照搬。 </p></blockquote><blockquote><p>Hexo官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p></blockquote><blockquote><p>Hexo官方配置文档: <a href="https://hexo.io/docs/configuration">https://hexo.io/docs/configuration</a></p></blockquote><blockquote><p>hiker主题GitHub地址（包含文档）：<a href="https://github.com/iTimeTraveler/hexo-theme-hiker.git">https://github.com/iTimeTraveler/hexo-theme-hiker.git themes/hiker</a></p></blockquote><p>要说了解Hexo,还得从简书开始，简书作为国内知名的创作社区，竟然在使用百度搜索时会在自己的链接下方有一个”<a href="https://www.jianshu.com/p/4eaddcbe4d12">个人博客搭建</a>“的入口，如下：</p><p><img src="/posts/8953dfef/15866779735407.jpg" alt="搜索简书"></p><p>一丝好奇让我随性的打开了这个链接,进入后，我立马见到了一句充满诱惑力的标题：<strong>“5分钟 搭建免费个人博客”</strong>，我简直是捡到了宝。简单看了下，好像不难，由此我开始一步一步的实现免费建站。</p><h2 id="登入GitHub"><a href="#登入GitHub" class="headerlink" title="登入GitHub"></a>登入GitHub</h2><p>因为我是GitHub的用户，我直接进入创建资源库，这里我填写的<a href="cba023.github.io">cba023.github.io</a>, cba023是我的用户名，这里要和GitHub的账户名保持一致，后面访问的博客地址也是这一个。</p><p><img src="/posts/8953dfef/15866793590067.jpg" alt="创建GitHub资源库"></p><p>以<code>public</code>方式创建，这样能保证上传后，博客能够在公网访问到，点击<code>Create respository</code>完成创建资源库。</p><h2 id="Hexo环境搭建"><a href="#Hexo环境搭建" class="headerlink" title="Hexo环境搭建"></a>Hexo环境搭建</h2><p>Mac环境下搭建非常简单，使用<code>Homebrew</code>安装<code>Node.js</code>。接下来就是打开终端，开始噼里啪啦。</p><p>安装nvm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install nvm<br><span class="hljs-built_in">mkdir</span> ~/.nvm<br><span class="hljs-built_in">export</span> NVM_DIR=~/.nvm<br>.$(brew --prefix nvm)/nvm.sh <br></code></pre></td></tr></table></figure><p>安装完成，重启终端。输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nvm install latest<br></code></pre></td></tr></table></figure><p>保持网络通畅，等待片刻，Hexo依赖的环境就装好了。接下来就是主角<code>Hexo</code>登场。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>需要输入用户密码。稍等片刻，安装完成。安装过程可能有一些偶然的错误，会在控制台返回错误信息，然后我们可以把错误信息复制到网络上检索就会有相关的解决方案。</p><h2 id="博客建站"><a href="#博客建站" class="headerlink" title="博客建站"></a>博客建站</h2><h3 id="生成工作文件夹"><a href="#生成工作文件夹" class="headerlink" title="生成工作文件夹"></a>生成工作文件夹</h3><p>首先需要在用户文件夹建立博客工作区文件夹，我选择的是<code>~/Documents</code>路径</p><p>打开指定的文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Documents<br></code></pre></td></tr></table></figure><p>初始化hexo工作文件目录，文件夹名和GitHub中创建的资源库文件目录一致，我创建的是<code>hexo init cba023.github.io</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init &lt;username&gt;.github.io<br></code></pre></td></tr></table></figure><p>在<code>Documents</code>文件夹下多了一个<code>&lt;username&gt;.github.io</code>目录，后面我们统称为<strong>工作文件夹</strong>，里面有一些文件，其中有一个<code>_config.yml</code>文件夹，这是Hexo的配置文件。我们主要的配置是在这里完成的，后面再做讲解。</p><h3 id="让博客站跑起来"><a href="#让博客站跑起来" class="headerlink" title="让博客站跑起来"></a>让博客站跑起来</h3><p>使用终端进入到刚才生成的<strong>工作文件夹</strong><code>&lt;username&gt;.github.io</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &lt;username&gt;.github.io<br></code></pre></td></tr></table></figure><p>接着输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p>终端会打印很多信息，最后还会显示一个链接地址。这个时候我们的博客就可以在本地计算机打开了，我们在浏览器中输入<strong>本地服务链接</strong><code>http://localhost:4000</code>，可以看到：</p><p><img src="/posts/8953dfef/15866820161598.jpg" alt="landscape主题"></p><p>如果看到了<code>Hello World</code>, 说明本地服务已经跑起来了。接下来我们只需要配置里面的参数，就可以让这个服务为我们所用。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>Hexo默认配置了一个主题<code>landscape</code>。我去<a href="https://hexo.io/themes/">官方的主题库</a>里找到了<code>hiker</code>主题并换成了它，主题可以用git从GitHub克隆。新开一个终端窗口，定位到<strong>工作文件夹</strong>下。键入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/iTimeTraveler/hexo-theme-hiker.git themes/hiker<br></code></pre></td></tr></table></figure><p>这样hiker主题就被克隆下来了。<br>这时候我们进入<strong>工作文件夹</strong>下的<code>_config.yml</code>,把主题配置从<code>theme: landscape</code>改成：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">hiker</span><br></code></pre></td></tr></table></figure><p>这样主题就成功设置成<code>hiker</code>了，这时候<strong>重启Hexo服务</strong>（开启服务的终端窗口键入<code>ctrl + c</code>，也可以关闭之前运行本地服务的终端窗口，新开一个终端窗口）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p>再打开<code>localhost:4000</code>地址，发现网页画风变了。</p><p><img src="/posts/8953dfef/15866844702507.jpg" alt="hiker主题"></p><p>这样，主题更换就算完成了，该网页可以滚动，往上面滚动网页可以看到更多的内容。</p><h3 id="设置标签"><a href="#设置标签" class="headerlink" title="设置标签"></a>设置标签</h3><p><img src="/posts/8953dfef/15866860164961.jpg" alt="hiker主题"></p><p>这是<code>hiker</code>主题的首页向上滚动后的界面，默认包含5个标签：<code>Home</code>, <code>Archives</code>, <code>Categories</code>, <code>Tags</code>, <code>About</code>。现在还是英文的标题，打开<strong>工作文件夹</strong>下的<code>_config.yml</code>，修改如下部分内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">陈波·博客</span><br><span class="hljs-attr">subtitle:</span> <br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">keywords:</span> <br><span class="hljs-attr">author:</span> <span class="hljs-string">陈波</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure><p>这里我们除了更改语言环境，顺便把博客拥有人的信息填写下，然后<strong>重启Hexo服务</strong>，刷新浏览器中<strong>本地服务链接</strong>的网页，网页变成中文了，而且博主的名字成了自己的名字。<br>Hexo博客功能的配置主要是在<strong>工作文件夹</strong>下的<code>_config.yml</code>中配置完成的，里面的每一项都是一个配置，可以自己去查阅资料并付诸实践。  </p><p><img src="/posts/8953dfef/15866860492630.jpg" alt="修改语言后"></p><p>然后我们试着切换网页的顶部标签，<code>首页</code>、<code>归档</code>切换都正常，但是<code>分类</code>、<code>标签</code>、<code>关于</code>在点击后都会跳转异常，出现<code>Cannot GET..</code>的错误，显然这是是路径找不到的原因，我们在工作文件夹下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page categories<br>hexo new page tags<br>hexo new page about<br></code></pre></td></tr></table></figure><p>执行了上述3条命令后，<strong>工作文件夹</strong>下的<code>source文件夹</code>下会生成三个文件夹，如下：</p><p><img src="/posts/8953dfef/15866870542245.jpg" alt="source文件夹"></p><p>三个文件夹下各自有一个<code>index.md</code>文件，打开后内分别如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-04-12 18:20:14</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-04-12 18:20:21</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-04-12 18:23:16</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>接着分别将他们修改成：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">分类</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-04-12 18:20:14</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">false</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标签</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-04-12 18:20:21</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">false</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">关于</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-04-12 18:23:16</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">comments:</span> <span class="hljs-literal">false</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>这时候我们再进入网页，就不会有之前的<code>Cannot GET..</code>错误发生啦。</p><h3 id="配置站内搜索"><a href="#配置站内搜索" class="headerlink" title="配置站内搜索"></a>配置站内搜索</h3><p>网页右上角有一个搜索按钮，点击后能显示搜索框，但是不能搜索。这时候还需要使用终端定位到<strong>工作文件夹</strong>执行如下命令来开启搜索。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -S hexo-generator-json-content<br></code></pre></td></tr></table></figure><p>然后就可以搜索啦。</p><h3 id="配置小结"><a href="#配置小结" class="headerlink" title="配置小结"></a>配置小结</h3><p>通过上述的一系列的配置，本地服务算是基本正常了，还有更多的配置，这里我不再细说了。毕竟相关的配置还是很多的，需要自己一步一步地探索。本人就是在查阅大量网络资料并通过实践来实现整个博客功能的。</p><h2 id="编写并发布文章"><a href="#编写并发布文章" class="headerlink" title="编写并发布文章"></a>编写并发布文章</h2><h3 id="编写第一篇文章"><a href="#编写第一篇文章" class="headerlink" title="编写第一篇文章"></a>编写第一篇文章</h3><p>终于可以发布文章了，Hexo发布文章是通过Markdown形式来发布的，发布后，Hexo再将Markdown转换成HTML形式显示到网页上。不过这里的Markdown稍微有点点讲究，标题需要用Hexo规定的格式来。我们先来创建一篇文章吧。<br>终端定位到<strong>工作文件夹</strong>，键入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;第一篇文章&quot;</span><br></code></pre></td></tr></table></figure><p><code>&lt;工作文件夹&gt;/source/_post/</code>路径下会生成<code>第一篇文章.md</code></p><p>我们使用<code>访达</code>找到并打开该文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">你好</span> <span class="hljs-string">Hexo</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-04-12 18:57:32</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>我们可以给这一篇文章添加分类和标签，然后写入正文，编辑内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">你好</span> <span class="hljs-string">Hexo</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-04-12 18:57:32</span><br><span class="hljs-attr">categories:</span> <br><span class="hljs-bullet">-</span> <span class="hljs-string">Hexo学习</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">hexo</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">经验</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br></code></pre></td></tr></table></figure><p>在Hexo的Markdown中，上述片段中其实已经包含大标题了，所以我们可以只在在下面写入正文</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">## 第一章</span><br><br><span class="hljs-section">### 1.1  Hello hexo</span><br><br>哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈<br><br><br><span class="hljs-section">### 1.2  Dear hexo</span><br><br>呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵呵<br><br><span class="hljs-section">### 1.1  See you again hexo</span><br><br>嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿嘿<br><br><span class="hljs-quote">&gt; [<span class="hljs-string">单身交友点此处</span>](<span class="hljs-link">https://github.com/cba023</span>)</span><br><br></code></pre></td></tr></table></figure><p>编辑并保存该文件，这样就算写好一篇文章了，可以看出，Hexo发文的标题是由文件内部的标题决定的，与文件名无关</p><h3 id="本地服务预览编写的博文"><a href="#本地服务预览编写的博文" class="headerlink" title="本地服务预览编写的博文"></a>本地服务预览编写的博文</h3><p>这时候不需要发布文章就能在<code>localhost:4000</code>中看到刚才编写的文章了。</p><p><img src="/posts/8953dfef/15866907429987.jpg" alt="本地服务中有了新文章"></p><p>点击查看文章内容</p><p><img src="/posts/8953dfef/15866907876267.jpg" alt="新文章内容"></p><p>是不是一切OK。</p><h3 id="发布到线上"><a href="#发布到线上" class="headerlink" title="发布到线上"></a>发布到线上</h3><p>如果那么精彩的博文只能自己一个人看到，只能说是莫大的遗憾，为了不让遗憾上演，我们接下来把整个文章推送到我们之前配置的GitHub链接。<br>第一次推送需要安装本地依赖，终端定位到<strong>工作文件夹</strong>执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>我们每次发布文章需要向远程把我们的Hexo工作文件夹更改推送过去，执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p>推送成功后，我们可以访问远程的服务上的文章啦。删除文章同理，删除<code>_post</code>文件夹里的某一篇文章，本地同步到远程就会覆盖远程的服务。</p><p>就是这么简单！✌️✌️</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>你好，Hexo</title>
    <link href="/posts/8ec25db2/"/>
    <url>/posts/8ec25db2/</url>
    
    <content type="html"><![CDATA[<p>我直接拿了Hexo的hello_world文档做了个翻译，就算是我在上面发表的第一篇博文吧！😁😁</p><blockquote><p>官网：<a href="https://hexo.io/">https://hexo.io/</a></p></blockquote><blockquote><p>文档：<a href="https://hexo.io/docs/">https://hexo.io/docs/</a></p></blockquote><blockquote><p>故障排除：<a href="https://hexo.io/docs/troubleshooting.html">https://hexo.io/docs/troubleshooting.html</a></p></blockquote><blockquote><p>GitHub issues：<a href="https://github.com/hexojs/hexo/issues">https://github.com/hexojs/hexo/issues</a></p></blockquote><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新帖"><a href="#创建新帖" class="headerlink" title="创建新帖"></a>创建新帖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;你好，Hexo&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://hexo.io/docs/writing.html">https://hexo.io/docs/writing.html</a></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p><a href="https://hexo.io/docs/server.html">https://hexo.io/docs/server.html</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p><a href="https://hexo.io/docs/generating.html">https://hexo.io/docs/generating.html</a></p><h3 id="发布到远程站点"><a href="#发布到远程站点" class="headerlink" title="发布到远程站点"></a>发布到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p><a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a></p>]]></content>
    
    
    <categories>
      
      <category>hexo学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>经验</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
